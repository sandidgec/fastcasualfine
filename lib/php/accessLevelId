<?php

class accessLevel extends SplEnum implements JsonSerializable {
    const __default = self::Viewer;
    const Viewer = 1;
    const Admin = 2;
    const PowerUser = 3;

    private $accessLevel;

    private $description;

    public function __construct($newAccessLevel, $newDescription)
    {
        try {
            $this->setAccessLevel($newAccessLevel);
            $this->setDescription($newDescription);
            }catch
            (InvalidArgumentException $invalidArgument) {
                //rethrow the exception to the caller
                throw(new InvalidArgumentException($invalidArgument->getMessage(), 0, $invalidArgument));
            } catch (RangeException $range) {
                // rethrow the exception to the caller
                throw (new RangeException($range->getMessage(), 0, $range));
            } catch (Exception $exception) {
                // rethrow generic exceptionthrow(new Exception($exception->getMessage(), 0, $exception));
            }
        }


    public function getAccessLevel() {
        return ($this->accessLevel);
    }

    public function setUserId($newAccessLevel) {
        // base case: if the accessLevelId is null,
        if($newAccessLevel === null) {
            $this->accessLevel = null;
            return;
        }
        //verify the accessLevel is valid
        $newAccessLevel = filter_var($newAccessLevel, FILTER_VALIDATE_INT);
        if(empty($newAccessLevel) === true) {
            throw (new InvalidArgumentException ("accessLevel invalid"));
        }
        $this->accessLevel = $newAccessLevel;
    }

    public function getDescription() {
        return ($this->description);
    }

    public function setDescription($newDescription) {
        // verify description is valid
        $newDescription = filter_var($newDescription, FILTER_SANITIZE_STRING);
        if(empty($newDescription) === true) {
            throw new InvalidArgumentException("description is invalid");
        }
        if(strlen($newDescription) > 32) {
            throw (new RangeException ("description too large"));
        }
    }

    public function JsonSerialize() {
        $fields = get_object_vars($this);
        return ($fields);
    }

    public function insert(PDO $pdo) {
        //create query template
        $query
            = "INSERT INTO accessLevel(description)
        VALUES (:description)";
        $statement = $pdo->prepare($query);
        // bind the variables to the place holders in the template
        $parameters = array("description" => $this->description);
        $statement->execute($parameters);
    }

    public function delete(PDO $pdo) {
        //create query template
        $query = "DELETE FROM accessLevel WHERE accessLevel = :accessLevel";
        $statement = $pdo->prepare($query);
        $parameters = array("accessLevel" => $this->accessLevel);
        $statement->execute($parameters);
    }

    public function update(PDO $pdo) {
        // create query template
        $query = "UPDATE accessLevel SET description = :description WHERE accessLevel = :accessLevel";
        $statement = $pdo->prepare($query);
        // bind the member variables
        $parameters = array("description" => $this->description,  "accessLevel" => $this->accessLevel);
        $statement->execute($parameters);
    }
}